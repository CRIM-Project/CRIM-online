'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _backbone = require('backbone');

var Backbone = _interopRequireWildcard(_backbone);

var _verovioInteractionView = require('./views/verovioInteractionView');

var _verovioInteractionView2 = _interopRequireDefault(_verovioInteractionView);

var _highlightView = require('./views/highlightView');

var _highlightView2 = _interopRequireDefault(_highlightView);

var _modelMEIdata = require('./data/model-MEIdata');

var _modelMEIdata2 = _interopRequireDefault(_modelMEIdata);

var _backboneEvents = require('./utils/backbone-events');

var _backboneEvents2 = _interopRequireDefault(_backboneEvents);

var _verovioExt = require('./utils/verovio-ext');

var _verovioExt2 = _interopRequireDefault(_verovioExt);

var _EMAexpr = require('./components/EMAexpr');

var _EMAexpr2 = _interopRequireDefault(_EMAexpr);

var _pagination = require('./components/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _namespace = require('./utils/namespace');

var _namespace2 = _interopRequireDefault(_namespace);

require('xmldom');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// NOTES
// jQuery is only used for HTML DOM operations. All XML DOM operations require xmldom.

var Continuo = function (_Backbone$View) {
    _inherits(Continuo, _Backbone$View);

    function Continuo() {
        _classCallCheck(this, Continuo);

        return _possibleConstructorReturn(this, (Continuo.__proto__ || Object.getPrototypeOf(Continuo)).apply(this, arguments));
    }

    _createClass(Continuo, [{
        key: 'initialize',
        value: function initialize(options) {
            var _this2 = this;

            this.mei = options.mei;
            this.meiString = options.meiString;
            this.omas = options.omas;
            this.verovioToolkit = options.verovioToolkit;
            this.verovioOptions = options.verovioOptions;
            this.paginate = options.paginate;
            this.showPageCtrls = options.showPageCtrls === null || options.showPageCtrls === undefined ? true : options.showPageCtrls;
            this.page = 1;
            this.selectedElements = [];
            this.highlightedElements = [];
            this.listenTo(_backboneEvents2.default, 'addFile', this.addFile);
            this.listenTo(_backboneEvents2.default, 'component:pagination:next', function () {
                _this2.renderPage(_this2.page + 1);
            });
            this.listenTo(_backboneEvents2.default, 'component:pagination:prev', function () {
                _this2.renderPage(_this2.page - 1);
            });
        }
    }, {
        key: 'addFile',
        value: function addFile(textData) {
            var _this3 = this;

            // Create score
            var container = this.$el.find(".cnt-container");
            this.EMAComponent.trigger('component:emaBox:url', textData["url"]);

            var doc = new DOMParser().parseFromString(textData["string"], 'text/xml');
            this.MEIdata = new _modelMEIdata2.default({ "doc": doc,
                "string": textData["string"]
            });
            this.MEIdata.generate_ids();

            // Sadly, importing Verovio crashes babelify,
            // so we assume it's globally available
            // i.e. verovio must be defined.
            var vrvToolkit = this.verovioToolkit ? this.verovioToolkit : new verovio.toolkit();
            this.vrvToolkit = vrvToolkit;
            var scale = 50;
            var options = this.verovioOptions ? this.verovioOptions : {
                pageWidth: this.$el.width() * 100 / scale,
                pageHeight: this.$el.height() * 100 / scale,
                ignoreLayout: 1,
                adjustPageHeight: 1,
                border: 50,
                scale: scale
            };
            vrvToolkit.setOptions(options);
            var mei = textData["string"];
            vrvToolkit.loadData(mei + "\n", "");

            if (this.paginate) {
                this.page = 1;
                var svg = vrvToolkit.renderPage(1);
                var ext_svg = (0, _verovioExt2.default)(svg);
                container.append(ext_svg);
            } else {
                var pgs = vrvToolkit.getPageCount();
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Array.from(new Array(pgs), function (x, i) {
                        return i;
                    })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var page = _step.value;

                        var _svg = vrvToolkit.renderPage(page + 1);

                        var _ext_svg = (0, _verovioExt2.default)(_svg);
                        container.append(_ext_svg);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            this.interView = new _verovioInteractionView2.default({ "el": container, "model": this.MEIdata });
            this.interView.on("component:emaBox", function (expr) {
                return _this3.EMAComponent.trigger("component:emaBox", expr);
            });
            this.interView.on('selectElement', function (id) {
                _this3.selectedElements.push(id);_this3.trigger("selected", id);
            });
            this.interView.on('deselectElement', function (id) {
                var index = _this3.selectedElements.indexOf(id);
                if (index > -1) {
                    _this3.selectedElements.splice(index, 1);
                }
                _this3.trigger("deselected", id);
            });

            // Determine if notation must be highlighted
            var api_opts = textData["url"].split("/").pop();
            if (api_opts.includes("highlight")) {
                new _highlightView2.default({ "el": container, "model": this.MEIdata });
            }
        }
    }, {
        key: 'clearSelection',
        value: function clearSelection() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.selectedElements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var sel = _step2.value;

                    var $sel = this.$el.find("#" + sel);
                    var class_att = $sel.attr("class");
                    if (class_att) {
                        var classes = class_att.split(" ");
                        classes.splice(classes.indexOf(".cnt-selected"), 1);
                        $sel.attr("class", classes.join(" "));
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.interView.clearMusEvents();
            this.selectedElements = [];
            this.trigger("clearedSelection");
        }
    }, {
        key: 'highlight',
        value: function highlight(ids) {
            this.highlightedElements = ids;
            this.renderPage(this.page);
        }
    }, {
        key: 'clearHighlight',
        value: function clearHighlight() {
            this.highlightedElements = [];
            this.renderPage(this.page);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var container = (0, _jquery2.default)("<div class='cnt-container'></div>");
            this.$el.append(container);

            // Create EMA floating box
            this.EMAComponent = new _EMAexpr2.default();
            container.append(this.EMAComponent.render());

            this.listenTo(this.EMAComponent, 'component:emaBox:clear', this.clearSelection);

            if (this.paginate && this.showPageCtrls) {
                // Create pagination floating box
                container.append(new _pagination2.default().render());
            }

            if (this.meiString) {
                this.addFile({
                    "filename": "",
                    "url": "",
                    "string": this.meiString
                });
            } else if (this.mei) {
                var url = this.mei;

                if (this.omas) {
                    url = this.omas + encodeURIComponent(this.mei) + "/all/all/@all";
                }

                _jquery2.default.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'text',
                    success: function success(data) {
                        _this4.addFile({
                            "filename": _this4.mei,
                            "url": _this4.mei,
                            "string": data
                        });
                    }
                });
            }

            return this.$el;
        }
    }, {
        key: 'renderPage',
        value: function renderPage(page) {
            if (page > 0 && page <= this.vrvToolkit.getPageCount()) {
                this.page = page;
                var svg = this.vrvToolkit.renderPage(page);
                var ext_svg = (0, _verovioExt2.default)(svg);
                this.$el.find(".cnt-container > svg").replaceWith(ext_svg);

                // Highlight ids
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = this.selectedElements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var id = _step3.value;

                        var $mei_el = this.$el.find("#" + id);
                        if (!$mei_el.hasClass("cnt-selected")) {
                            $mei_el.addClass("cnt-selected");
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = this.highlightedElements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var _id = _step4.value;

                        var _$mei_el = this.$el.find("#" + _id);
                        if (!_$mei_el.hasClass("cnt-highlighted")) {
                            _$mei_el.addClass("cnt-highlighted");
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }
        }
    }]);

    return Continuo;
}(Backbone.View);

// Make main class available to pre-ES6 browser environments


if (window) {
    window.Continuo = Continuo;
}
exports.default = Continuo;
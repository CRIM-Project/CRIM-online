# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_verovio')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_verovio')
    _verovio = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_verovio', [dirname(__file__)])
        except ImportError:
            import _verovio
            return _verovio
        try:
            _mod = imp.load_module('_verovio', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _verovio = swig_import_helper()
    del swig_import_helper
else:
    import _verovio
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

uNKNOWN = _verovio.uNKNOWN
aUTO = _verovio.aUTO
mEI = _verovio.mEI
hUMDRUM = _verovio.hUMDRUM
pAE = _verovio.pAE
aBC = _verovio.aBC
dARMS = _verovio.dARMS
mUSICXML = _verovio.mUSICXML
mUSICXMLHUM = _verovio.mUSICXMLHUM
mEIHUM = _verovio.mEIHUM
mUSEDATAHUM = _verovio.mUSEDATAHUM
eSAC = _verovio.eSAC
mIDI = _verovio.mIDI
tIMEMAP = _verovio.tIMEMAP
class toolkit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, toolkit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, toolkit, name)
    __repr__ = _swig_repr

    def __init__(self, initFont=True):
        this = _verovio.new_toolkit(initFont)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _verovio.delete_toolkit
    __del__ = lambda self: None

    def getUuid(self):
        return _verovio.toolkit_getUuid(self)

    def setResourcePath(self, path):
        return _verovio.toolkit_setResourcePath(self, path)

    def loadFile(self, filename):
        return _verovio.toolkit_loadFile(self, filename)

    def loadData(self, data):
        return _verovio.toolkit_loadData(self, data)

    def saveFile(self, filename):
        return _verovio.toolkit_saveFile(self, filename)

    def getOptions(self, *args):
        return _verovio.toolkit_getOptions(self, *args)

    def getAvailableOptions(self):
        return _verovio.toolkit_getAvailableOptions(self)

    def setOptions(self, json_options):
        return _verovio.toolkit_setOptions(self, json_options)

    def getOption(self, option, defaultValue=False):
        return _verovio.toolkit_getOption(self, option, defaultValue)

    def setOption(self, option, value):
        return _verovio.toolkit_setOption(self, option, value)

    def edit(self, json_editorAction):
        return _verovio.toolkit_edit(self, json_editorAction)

    def editInfo(self):
        return _verovio.toolkit_editInfo(self)

    def getLog(self):
        return _verovio.toolkit_getLog(self)

    def getVersion(self):
        return _verovio.toolkit_getVersion(self)

    def renderToDeviceContext(self, pageNo, deviceContext):
        return _verovio.toolkit_renderToDeviceContext(self, pageNo, deviceContext)

    def renderToSVG(self, pageNo=1, xml_declaration=False):
        return _verovio.toolkit_renderToSVG(self, pageNo, xml_declaration)

    def renderToSVGFile(self, filename, pageNo=1):
        return _verovio.toolkit_renderToSVGFile(self, filename, pageNo)

    def renderToMIDIFile(self, filename):
        return _verovio.toolkit_renderToMIDIFile(self, filename)

    def renderToMIDI(self):
        return _verovio.toolkit_renderToMIDI(self)

    def renderToTimemap(self):
        return _verovio.toolkit_renderToTimemap(self)

    def renderToTimemapFile(self, filename):
        return _verovio.toolkit_renderToTimemapFile(self, filename)

    def getHumdrumBuffer(self):
        return _verovio.toolkit_getHumdrumBuffer(self)

    def setHumdrumBuffer(self, contents):
        return _verovio.toolkit_setHumdrumBuffer(self, contents)

    def getHumdrumFile(self, filename):
        return _verovio.toolkit_getHumdrumFile(self, filename)

    def getHumdrum(self, *args):
        return _verovio.toolkit_getHumdrum(self, *args)

    def getElementsAtTime(self, millisec):
        return _verovio.toolkit_getElementsAtTime(self, millisec)

    def getMEI(self, pageNo=0, scoreBased=True):
        return _verovio.toolkit_getMEI(self, pageNo, scoreBased)

    def getElementAttr(self, xmlId):
        return _verovio.toolkit_getElementAttr(self, xmlId)

    def redoLayout(self):
        return _verovio.toolkit_redoLayout(self)

    def redoPagePitchPosLayout(self):
        return _verovio.toolkit_redoPagePitchPosLayout(self)

    def getPageWithElement(self, xmlId):
        return _verovio.toolkit_getPageWithElement(self, xmlId)

    def getTimeForElement(self, xmlId):
        return _verovio.toolkit_getTimeForElement(self, xmlId)

    def getMIDIValuesForElement(self, xmlId):
        return _verovio.toolkit_getMIDIValuesForElement(self, xmlId)

    def setScale(self, scale):
        return _verovio.toolkit_setScale(self, scale)

    def getScale(self):
        return _verovio.toolkit_getScale(self)

    def setFormat(self, *args):
        return _verovio.toolkit_setFormat(self, *args)

    def getFormat(self):
        return _verovio.toolkit_getFormat(self)

    def setOutputFormat(self, *args):
        return _verovio.toolkit_setOutputFormat(self, *args)

    def getOutputFormat(self):
        return _verovio.toolkit_getOutputFormat(self)

    def identifyInputFormat(self, data):
        return _verovio.toolkit_identifyInputFormat(self, data)

    def setScoreBasedMei(self, scoreBasedMei):
        return _verovio.toolkit_setScoreBasedMei(self, scoreBasedMei)

    def getScoreBasedMei(self):
        return _verovio.toolkit_getScoreBasedMei(self)

    def getPageCount(self):
        return _verovio.toolkit_getPageCount(self)
toolkit_swigregister = _verovio.toolkit_swigregister
toolkit_swigregister(toolkit)

# This file is compatible with both classic and new-style classes.


